"use strict";
class PlatformProjectServiceBase {
    constructor($fs, $projectData, $projectDataService) {
        this.$fs = $fs;
        this.$projectData = $projectData;
        this.$projectDataService = $projectDataService;
    }
    getPluginPlatformsFolderPath(pluginData, platform) {
        return pluginData.pluginPlatformsFolderPath(platform);
    }
    getAllNativeLibrariesForPlugin(pluginData, platform, filter) {
        let pluginPlatformsFolderPath = this.getPluginPlatformsFolderPath(pluginData, platform), nativeLibraries = [];
        if (pluginPlatformsFolderPath && this.$fs.exists(pluginPlatformsFolderPath)) {
            let platformsContents = this.$fs.readDirectory(pluginPlatformsFolderPath);
            nativeLibraries = _(platformsContents)
                .filter(platformItemName => filter(platformItemName, pluginPlatformsFolderPath))
                .value();
        }
        return nativeLibraries;
    }
    getFrameworkVersion(runtimePackageName) {
        this.$projectDataService.initialize(this.$projectData.projectDir);
        let frameworkVersion = this.$projectDataService.getValue(runtimePackageName).version;
        return frameworkVersion;
    }
}
exports.PlatformProjectServiceBase = PlatformProjectServiceBase;
