"use strict";
const path = require("path");
const temp = require("temp");
const constants = require("../constants");
temp.track();
class ProjectTemplatesService {
    constructor($errors, $fs, $logger, $npm, $npmInstallationManager, $analyticsService) {
        this.$errors = $errors;
        this.$fs = $fs;
        this.$logger = $logger;
        this.$npm = $npm;
        this.$npmInstallationManager = $npmInstallationManager;
        this.$analyticsService = $analyticsService;
    }
    prepareTemplate(originalTemplateName, projectDir) {
        return (() => {
            let templateName = originalTemplateName || constants.RESERVED_TEMPLATE_NAMES["default"], version = null;
            if (originalTemplateName) {
                let data = originalTemplateName.split("@"), name = data[0];
                version = data[1];
                templateName = constants.RESERVED_TEMPLATE_NAMES[name.toLowerCase()] || name;
            }
            this.$analyticsService.track("Template used for project creation", templateName).wait();
            const realTemplatePath = this.prepareNativeScriptTemplate(templateName, version, projectDir).wait();
            if (realTemplatePath) {
                this.$fs.deleteDirectory(path.join(realTemplatePath, constants.NODE_MODULES_FOLDER_NAME));
                return realTemplatePath;
            }
            this.$errors.failWithoutHelp("Unable to find the template in temp directory. " +
                `Please open an issue at https://github.com/NativeScript/nativescript-cli/issues and send the output of the same command executed with --log trace.`);
        }).future()();
    }
    prepareNativeScriptTemplate(templateName, version, projectDir) {
        this.$logger.trace(`Using NativeScript verified template: ${templateName} with version ${version}.`);
        return this.$npmInstallationManager.install(templateName, projectDir, { version: version, dependencyType: "save" });
    }
}
exports.ProjectTemplatesService = ProjectTemplatesService;
$injector.register("projectTemplatesService", ProjectTemplatesService);
