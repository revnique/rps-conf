"use strict";
const path = require("path");
class AndroidProjectPropertiesManager {
    constructor($propertiesParser, $fs, $logger, directoryPath) {
        this.$propertiesParser = $propertiesParser;
        this.$fs = $fs;
        this.$logger = $logger;
        this._editor = null;
        this.filePath = null;
        this.dirty = false;
        this.filePath = path.join(directoryPath, "project.properties");
    }
    getProjectReferences() {
        return (() => {
            if (!this.projectReferences || this.dirty) {
                let allProjectProperties = this.getAllProjectProperties().wait();
                let allProjectPropertiesKeys = _.keys(allProjectProperties);
                this.projectReferences = _(allProjectPropertiesKeys)
                    .filter(key => _.startsWith(key, "android.library.reference."))
                    .map(key => this.createLibraryReference(key, allProjectProperties[key]))
                    .value();
            }
            return this.projectReferences;
        }).future()();
    }
    addProjectReference(referencePath) {
        return (() => {
            let references = this.getProjectReferences().wait();
            let libRefExists = _.some(references, r => path.normalize(r.path) === path.normalize(referencePath));
            if (!libRefExists) {
                this.addToPropertyList("android.library.reference", referencePath).wait();
            }
        }).future()();
    }
    removeProjectReference(referencePath) {
        return (() => {
            let references = this.getProjectReferences().wait();
            let libRefExists = _.some(references, r => path.normalize(r.path) === path.normalize(referencePath));
            if (libRefExists) {
                this.removeFromPropertyList("android.library.reference", referencePath).wait();
            }
            else {
                this.$logger.error(`Could not find ${referencePath}.`);
            }
        }).future()();
    }
    createEditor() {
        return (() => {
            return this._editor || this.$propertiesParser.createEditor(this.filePath).wait();
        }).future()();
    }
    buildKeyName(key, index) {
        return `${key}.${index}`;
    }
    getAllProjectProperties() {
        return this.$propertiesParser.read(this.filePath);
    }
    createLibraryReference(referenceName, referencePath) {
        return {
            idx: parseInt(referenceName.split("android.library.reference.")[1]),
            key: referenceName,
            path: referencePath,
            adjustedPath: path.join(path.dirname(this.filePath), referencePath)
        };
    }
    addToPropertyList(key, value) {
        return (() => {
            let editor = this.createEditor().wait();
            let i = 1;
            while (editor.get(this.buildKeyName(key, i))) {
                i++;
            }
            editor.set(this.buildKeyName(key, i), value);
            this.$propertiesParser.saveEditor().wait();
            this.dirty = true;
        }).future()();
    }
    removeFromPropertyList(key, value) {
        return (() => {
            let editor = this.createEditor().wait();
            let valueLowerCase = value.toLowerCase();
            let i = 1;
            let currentValue;
            while (currentValue = editor.get(this.buildKeyName(key, i))) {
                if (currentValue.toLowerCase() === valueLowerCase) {
                    while (currentValue = editor.get(this.buildKeyName(key, i + 1))) {
                        editor.set(this.buildKeyName(key, i), currentValue);
                        i++;
                    }
                    editor.set(this.buildKeyName(key, i));
                    break;
                }
                i++;
            }
            this.$propertiesParser.saveEditor().wait();
            this.dirty = true;
        }).future()();
    }
}
exports.AndroidProjectPropertiesManager = AndroidProjectPropertiesManager;
