"use strict";
const helpers_1 = require("../common/helpers");
class ProjectNameService {
    constructor($projectNameValidator, $errors, $logger, $prompter) {
        this.$projectNameValidator = $projectNameValidator;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$prompter = $prompter;
    }
    ensureValidName(projectName, validateOptions) {
        return (() => {
            if (validateOptions && validateOptions.force) {
                return projectName;
            }
            if (!this.$projectNameValidator.validate(projectName)) {
                return this.promptForNewName("The project name is invalid.", projectName, validateOptions).wait();
            }
            let userCanInteract = helpers_1.isInteractive();
            if (!this.checkIfNameStartsWithLetter(projectName)) {
                if (!userCanInteract) {
                    this.$errors.fail("The project name does not start with letter and will fail to build for Android. If You want to create project with this name add --force to the create command.");
                }
                return this.promptForNewName("The project name does not start with letter and will fail to build for Android.", projectName, validateOptions).wait();
            }
            if (projectName.toUpperCase() === "APP") {
                if (!userCanInteract) {
                    this.$errors.fail("You cannot build applications named 'app' in Xcode. Consider creating a project with different name. If You want to create project with this name add --force to the create command.");
                }
                return this.promptForNewName("You cannot build applications named 'app' in Xcode. Consider creating a project with different name.", projectName, validateOptions).wait();
            }
            return projectName;
        }).future()();
    }
    checkIfNameStartsWithLetter(projectName) {
        let startsWithLetterExpression = /^[a-zA-Z]/;
        return startsWithLetterExpression.test(projectName);
    }
    promptForNewName(warningMessage, projectName, validateOptions) {
        return (() => {
            if (this.promptForForceNameConfirm(warningMessage).wait()) {
                return projectName;
            }
            let newProjectName = this.$prompter.getString("Enter the new project name:").wait();
            return this.ensureValidName(newProjectName, validateOptions).wait();
        }).future()();
    }
    promptForForceNameConfirm(warningMessage) {
        return (() => {
            this.$logger.warn(warningMessage);
            return this.$prompter.confirm("Do you want to create the project with this name?").wait();
        }).future()();
    }
}
exports.ProjectNameService = ProjectNameService;
$injector.register("projectNameService", ProjectNameService);
