"use strict";
const npm_plugins_source_1 = require("./npm-plugins-source");
const npm_registry_plugins_source_1 = require("./npm-registry-plugins-source");
const npmjs_plugins_source_1 = require("./npmjs-plugins-source");
class NpmPluginsService {
    constructor($injector) {
        this.$injector = $injector;
    }
    search(projectDir, keywords, modifySearchQuery) {
        return (() => {
            let query = modifySearchQuery ? modifySearchQuery(keywords) : keywords;
            let pluginsSource = this.searchCore(npmjs_plugins_source_1.NpmjsPluginsSource, projectDir, keywords).wait() ||
                this.searchCore(npm_registry_plugins_source_1.NpmRegistryPluginsSource, projectDir, keywords).wait() ||
                this.preparePluginsSource(npm_plugins_source_1.NpmPluginsSource, projectDir, query).wait();
            return pluginsSource;
        }).future()();
    }
    optimizedSearch(projectDir, keywords, modifySearchQuery) {
        return (() => {
            return this.searchCore(npm_registry_plugins_source_1.NpmRegistryPluginsSource, projectDir, keywords).wait() || this.search(projectDir, keywords, modifySearchQuery).wait();
        }).future()();
    }
    searchCore(pluginsSourceConstructor, projectDir, keywords) {
        return (() => {
            let npmPluginsSource = this.preparePluginsSource(pluginsSourceConstructor, projectDir, keywords).wait();
            return npmPluginsSource.hasPlugins() ? npmPluginsSource : null;
        }).future()();
    }
    preparePluginsSource(pluginsSourceConstructor, projectDir, keywords) {
        return (() => {
            let pluginsSource = this.$injector.resolve(pluginsSourceConstructor, { projectDir, keywords });
            pluginsSource.initialize(projectDir, keywords).wait();
            return pluginsSource;
        }).future()();
    }
}
exports.NpmPluginsService = NpmPluginsService;
$injector.register("npmPluginsService", NpmPluginsService);
