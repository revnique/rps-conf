"use strict";
const fiberBootstrap = require("../../fiber-bootstrap");
exports.SYNC_WAIT_THRESHOLD = 250;
class SyncBatch {
    constructor($logger, $projectFilesManager, done) {
        this.$logger = $logger;
        this.$projectFilesManager = $projectFilesManager;
        this.done = done;
        this.timer = null;
        this.syncQueue = [];
        this.syncInProgress = false;
    }
    get filesToSync() {
        let filteredFiles = _.remove(this.syncQueue, syncFile => this.$projectFilesManager.isFileExcluded(syncFile));
        this.$logger.trace("Removed files from syncQueue: ", filteredFiles);
        return this.syncQueue;
    }
    get syncPending() {
        return this.syncQueue.length > 0;
    }
    syncFiles(syncAction) {
        return (() => {
            if (this.filesToSync.length > 0) {
                syncAction(this.filesToSync).wait();
                this.reset();
            }
        }).future()();
    }
    addFile(file) {
        if (this.timer) {
            clearTimeout(this.timer);
            this.timer = null;
        }
        this.syncQueue.push(file);
        if (!this.syncInProgress) {
            this.timer = setTimeout(() => {
                if (this.syncQueue.length > 0) {
                    this.$logger.trace("Syncing %s", this.syncQueue.join(", "));
                    fiberBootstrap.run(() => {
                        try {
                            this.syncInProgress = true;
                            this.done().wait();
                        }
                        finally {
                            this.syncInProgress = false;
                        }
                    });
                }
                this.timer = null;
            }, exports.SYNC_WAIT_THRESHOLD);
        }
    }
    reset() {
        this.syncQueue = [];
    }
}
exports.SyncBatch = SyncBatch;
