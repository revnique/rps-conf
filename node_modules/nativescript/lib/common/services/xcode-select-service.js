"use strict";
const path = require("path");
class XcodeSelectService {
    constructor($childProcess, $errors, $hostInfo, $injector) {
        this.$childProcess = $childProcess;
        this.$errors = $errors;
        this.$hostInfo = $hostInfo;
        this.$injector = $injector;
    }
    getDeveloperDirectoryPath() {
        return (() => {
            if (!this.$hostInfo.isDarwin) {
                this.$errors.failWithoutHelp("xcode-select is only available on Mac OS X.");
            }
            let childProcess = this.$childProcess.spawnFromEvent("xcode-select", ["-print-path"], "close", {}, { throwError: false }).wait(), result = childProcess.stdout.trim();
            if (!result) {
                this.$errors.failWithoutHelp("Cannot find path to Xcode.app - make sure you've installed Xcode correctly.");
            }
            return result;
        }).future()();
    }
    getContentsDirectoryPath() {
        return (() => {
            return path.join(this.getDeveloperDirectoryPath().wait(), "..");
        }).future()();
    }
    getXcodeVersion() {
        return (() => {
            if (!this._xcodeVerionCache) {
                let sysInfoBase = this.$injector.resolve("sysInfoBase");
                let xcodeVer = sysInfoBase.getXCodeVersion().wait(), xcodeVersionMatch = xcodeVer.match(/Xcode (.*)/), xcodeVersionGroup = xcodeVersionMatch && xcodeVersionMatch[1], xcodeVersionSplit = xcodeVersionGroup && xcodeVersionGroup.split(".");
                this._xcodeVerionCache = {
                    major: xcodeVersionSplit && xcodeVersionSplit[0],
                    minor: xcodeVersionSplit && xcodeVersionSplit[1],
                    patch: xcodeVersionSplit && xcodeVersionSplit[2]
                };
            }
            return this._xcodeVerionCache;
        }).future()();
    }
}
exports.XcodeSelectService = XcodeSelectService;
$injector.register("xcodeSelectService", XcodeSelectService);
