"use strict";
const android_debug_bridge_1 = require("./android-debug-bridge");
class DeviceAndroidDebugBridge extends android_debug_bridge_1.AndroidDebugBridge {
    constructor(identifier, $childProcess, $errors, $logger, $staticConfig, $androidDebugBridgeResultHandler) {
        super($childProcess, $errors, $logger, $staticConfig, $androidDebugBridgeResultHandler);
        this.identifier = identifier;
        this.$childProcess = $childProcess;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$staticConfig = $staticConfig;
        this.$androidDebugBridgeResultHandler = $androidDebugBridgeResultHandler;
    }
    executeShellCommand(args, options) {
        args.unshift("shell");
        return super.executeCommand(args, options);
    }
    sendBroadcastToDevice(action, extras) {
        return (() => {
            extras = extras || {};
            let broadcastCommand = ["am", "broadcast", "-a", `${action}`];
            _.each(extras, (value, key) => broadcastCommand.push("-e", key, value));
            let result = this.executeShellCommand(broadcastCommand).wait();
            this.$logger.trace(`Broadcast result ${result} from ${broadcastCommand}`);
            let match = result.match(/Broadcast completed: result=(\d+)/);
            if (match) {
                return +match[1];
            }
            this.$errors.failWithoutHelp("Unable to broadcast to android device:\n%s", result);
        }).future()();
    }
    composeCommand(params) {
        return super.composeCommand(params, this.identifier);
    }
}
exports.DeviceAndroidDebugBridge = DeviceAndroidDebugBridge;
