"use strict";
const querystring = require("querystring");
const device_app_data_base_1 = require("./../../mobile/device-app-data/device-app-data-base");
class AppBuilderDeviceAppDataBase extends device_app_data_base_1.DeviceAppDataBase {
    constructor(_appIdentifier, device, platform, $deployHelper, $devicePlatformsConstants) {
        super(_appIdentifier);
        this.device = device;
        this.platform = platform;
        this.$deployHelper = $deployHelper;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
    }
    get liveSyncFormat() {
        return null;
    }
    encodeLiveSyncHostUri(hostUri) {
        return querystring.escape(hostUri);
    }
    getLiveSyncNotSupportedError() {
        return `You can't LiveSync on device with id ${this.device.deviceInfo.identifier}! Deploy the app with LiveSync enabled and wait for the initial start up before LiveSyncing.`;
    }
    isLiveSyncSupported() {
        return (() => {
            let isApplicationInstalled = this.device.applicationManager.isApplicationInstalled(this.appIdentifier).wait();
            if (!isApplicationInstalled) {
                this.$deployHelper.deploy(this.platform.toString()).wait();
                this.device.applicationManager.checkForApplicationUpdates().wait();
            }
            return this.device.applicationManager.isLiveSyncSupported(this.appIdentifier).wait();
        }).future()();
    }
}
exports.AppBuilderDeviceAppDataBase = AppBuilderDeviceAppDataBase;
