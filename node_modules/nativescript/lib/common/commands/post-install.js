"use strict";
class PostInstallCommand {
    constructor($fs, $staticConfig, $commandsService, $htmlHelpService, $options, $doctorService, $analyticsService, $logger) {
        this.$fs = $fs;
        this.$staticConfig = $staticConfig;
        this.$commandsService = $commandsService;
        this.$htmlHelpService = $htmlHelpService;
        this.$options = $options;
        this.$doctorService = $doctorService;
        this.$analyticsService = $analyticsService;
        this.$logger = $logger;
        this.disableAnalytics = true;
        this.allowedParameters = [];
    }
    execute(args) {
        return (() => {
            if (process.platform !== "win32") {
                if (process.env.SUDO_USER) {
                    this.$fs.setCurrentUserAsOwner(this.$options.profileDir, process.env.SUDO_USER).wait();
                }
            }
            this.$htmlHelpService.generateHtmlPages().wait();
            let doctorResult = this.$doctorService.printWarnings({ trackResult: false }).wait();
            this.$analyticsService.checkConsent().wait();
            this.$commandsService.tryExecuteCommand("autocomplete", []).wait();
            this.$analyticsService.track("InstallEnvironmentSetup", doctorResult ? "incorrect" : "correct").wait();
            if (this.$staticConfig.INSTALLATION_SUCCESS_MESSAGE) {
                this.$logger.out();
                this.$logger.printMarkdown(this.$staticConfig.INSTALLATION_SUCCESS_MESSAGE);
            }
        }).future()();
    }
}
exports.PostInstallCommand = PostInstallCommand;
$injector.registerCommand("dev-post-install", PostInstallCommand);
