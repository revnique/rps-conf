"use strict";
const helpers_1 = require("../../helpers");
class ListDevicesCommand {
    constructor($devicesService, $logger, $stringParameter, $options) {
        this.$devicesService = $devicesService;
        this.$logger = $logger;
        this.$stringParameter = $stringParameter;
        this.$options = $options;
        this.allowedParameters = [this.$stringParameter];
    }
    execute(args) {
        return (() => {
            let index = 1;
            this.$devicesService.initialize({ platform: args[0], deviceId: null, skipInferPlatform: true }).wait();
            let table = helpers_1.createTable(["#", "Device Name", "Platform", "Device Identifier", "Type", "Status"], []);
            let action;
            if (this.$options.json) {
                this.$logger.setLevel("ERROR");
                action = (device) => {
                    return (() => {
                        this.$logger.out(JSON.stringify(device.deviceInfo));
                    }).future()();
                };
            }
            else {
                action = (device) => {
                    return (() => {
                        table.push([(index++).toString(), device.deviceInfo.displayName || '',
                            device.deviceInfo.platform || '', device.deviceInfo.identifier || '',
                            device.deviceInfo.type || '', device.deviceInfo.status || '']);
                    }).future()();
                };
            }
            this.$devicesService.execute(action, undefined, { allowNoDevices: true }).wait();
            if (!this.$options.json && table.length) {
                this.$logger.out(table.toString());
            }
        }).future()();
    }
}
exports.ListDevicesCommand = ListDevicesCommand;
$injector.registerCommand("device|*list", ListDevicesCommand);
class ListAndroidDevicesCommand {
    constructor($injector, $devicePlatformsConstants) {
        this.$injector = $injector;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.allowedParameters = [];
    }
    execute(args) {
        return (() => {
            let listDevicesCommand = this.$injector.resolve(ListDevicesCommand);
            let platform = this.$devicePlatformsConstants.Android;
            listDevicesCommand.execute([platform]).wait();
        }).future()();
    }
}
$injector.registerCommand("device|android", ListAndroidDevicesCommand);
class ListiOSDevicesCommand {
    constructor($injector, $devicePlatformsConstants) {
        this.$injector = $injector;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.allowedParameters = [];
    }
    execute(args) {
        return (() => {
            let listDevicesCommand = this.$injector.resolve(ListDevicesCommand);
            let platform = this.$devicePlatformsConstants.iOS;
            listDevicesCommand.execute([platform]).wait();
        }).future()();
    }
}
$injector.registerCommand("device|ios", ListiOSDevicesCommand);
