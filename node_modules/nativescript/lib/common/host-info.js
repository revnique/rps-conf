"use strict";
const Future = require("fibers/future");
class HostInfo {
    constructor($errors) {
        this.$errors = $errors;
    }
    get isWindows() {
        return process.platform === HostInfo.WIN32_NAME;
    }
    get isWindows64() {
        return this.isWindows && (process.arch === "x64" || process.env.hasOwnProperty(HostInfo.PROCESSOR_ARCHITEW6432));
    }
    get isWindows32() {
        return this.isWindows && !this.isWindows64;
    }
    get isDarwin() {
        return process.platform === HostInfo.DARWIN_OS_NAME;
    }
    get isLinux() {
        return process.platform === HostInfo.LINUX_OS_NAME;
    }
    get isLinux64() {
        return this.isLinux && process.config.variables.host_arch === "x64";
    }
    dotNetVersion() {
        if (this.isWindows) {
            let result = new Future();
            let Winreg = require("winreg");
            let regKey = new Winreg({
                hive: Winreg.HKLM,
                key: HostInfo.DOT_NET_REGISTRY_PATH
            });
            regKey.get("Version", (err, value) => {
                if (err) {
                    result.throw(err);
                }
                else {
                    result.return(value.value);
                }
            });
            return result;
        }
        else {
            return Future.fromResult(null);
        }
    }
    isDotNet40Installed(message) {
        return (() => {
            if (this.isWindows) {
                try {
                    this.dotNetVersion().wait();
                    return true;
                }
                catch (e) {
                    this.$errors.failWithoutHelp(message || "An error occurred while reading the registry.");
                }
            }
            else {
                return false;
            }
        }).future()();
    }
}
HostInfo.WIN32_NAME = "win32";
HostInfo.PROCESSOR_ARCHITEW6432 = "PROCESSOR_ARCHITEW6432";
HostInfo.DARWIN_OS_NAME = "darwin";
HostInfo.LINUX_OS_NAME = "linux";
HostInfo.DOT_NET_REGISTRY_PATH = "\\Software\\Microsoft\\NET Framework Setup\\NDP\\v4\\Client";
exports.HostInfo = HostInfo;
$injector.register("hostInfo", HostInfo);
