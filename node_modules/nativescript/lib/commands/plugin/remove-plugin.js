"use strict";
class RemovePluginCommand {
    constructor($pluginsService, $errors, $logger, $projectData) {
        this.$pluginsService = $pluginsService;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$projectData = $projectData;
        this.allowedParameters = [];
    }
    execute(args) {
        return this.$pluginsService.remove(args[0]);
    }
    canExecute(args) {
        return (() => {
            if (!args[0]) {
                this.$errors.fail("You must specify plugin name.");
            }
            let pluginNames = [];
            try {
                let installedPlugins = this.$pluginsService.getAllInstalledPlugins().wait();
                pluginNames = installedPlugins.map(pl => pl.name);
            }
            catch (err) {
                this.$logger.trace("Error while installing plugins. Error is:", err);
                pluginNames = _.keys(this.$projectData.dependencies);
            }
            let pluginName = args[0].toLowerCase();
            if (!_.some(pluginNames, name => name.toLowerCase() === pluginName)) {
                this.$errors.failWithoutHelp(`Plugin "${pluginName}" is not installed.`);
            }
            return true;
        }).future()();
    }
}
exports.RemovePluginCommand = RemovePluginCommand;
$injector.registerCommand("plugin|remove", RemovePluginCommand);
