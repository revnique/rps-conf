"use strict";
class UpdatePluginCommand {
    constructor($pluginsService, $errors) {
        this.$pluginsService = $pluginsService;
        this.$errors = $errors;
        this.allowedParameters = [];
    }
    execute(args) {
        return (() => {
            let pluginNames = args;
            if (!pluginNames || args.length === 0) {
                let installedPlugins = this.$pluginsService.getAllInstalledPlugins().wait();
                pluginNames = installedPlugins.map(p => p.name);
            }
            _.each(pluginNames, p => {
                this.$pluginsService.remove(p).wait();
                this.$pluginsService.add(p).wait();
            });
        }).future()();
    }
    canExecute(args) {
        return (() => {
            if (!args || args.length === 0) {
                return true;
            }
            let installedPlugins = this.$pluginsService.getAllInstalledPlugins().wait();
            let installedPluginNames = installedPlugins.map(pl => pl.name);
            let pluginName = args[0].toLowerCase();
            if (!_.some(installedPluginNames, name => name.toLowerCase() === pluginName)) {
                this.$errors.failWithoutHelp(`Plugin "${pluginName}" is not installed.`);
            }
            return true;
        }).future()();
    }
}
exports.UpdatePluginCommand = UpdatePluginCommand;
$injector.registerCommand("plugin|update", UpdatePluginCommand);
