"use strict";
const Future = require("fibers/future");
const lockfile = require("lockfile");
const path = require("path");
class LockFile {
    constructor($options) {
        this.$options = $options;
        this.lockFilePath = path.join(this.$options.profileDir, ".lock");
    }
    lock() {
        let future = new Future();
        lockfile.lock(this.lockFilePath, LockFile.LOCK_PARAMS, (err) => {
            if (err) {
                future.throw(err);
            }
            else {
                future.return();
            }
        });
        return future;
    }
    unlock() {
        let future = new Future();
        lockfile.unlock(this.lockFilePath, (err) => {
            if (err) {
                future.throw(err);
            }
            else {
                future.return();
            }
        });
        return future;
    }
    check() {
        let future = new Future();
        lockfile.check(this.lockFilePath, LockFile.LOCK_PARAMS, (err, isLocked) => {
            if (err) {
                future.throw(err);
            }
            else {
                future.return(isLocked);
            }
        });
        return future;
    }
}
LockFile.LOCK_EXPIRY_PERIOD_SEC = 180;
LockFile.LOCK_PARAMS = {
    retryWait: 100,
    retries: LockFile.LOCK_EXPIRY_PERIOD_SEC * 10,
    stale: LockFile.LOCK_EXPIRY_PERIOD_SEC * 1000
};
exports.LockFile = LockFile;
$injector.register("lockfile", LockFile);
