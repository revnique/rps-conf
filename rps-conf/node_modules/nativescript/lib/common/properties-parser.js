"use strict";
const propertiesParser = require("properties-parser");
const Future = require("fibers/future");
const assert = require("assert");
class PropertiesParser {
    constructor() {
        this._editor = null;
    }
    parse(text) {
        return propertiesParser.parse(text);
    }
    read(filePath) {
        let future = new Future();
        propertiesParser.read(filePath, (err, data) => {
            if (err) {
                future.throw(err);
            }
            else {
                future.return(data);
            }
        });
        return future;
    }
    createEditor(filePath) {
        let future = new Future();
        propertiesParser.createEditor(filePath, (err, data) => {
            if (err) {
                future.throw(err);
            }
            else {
                this._editor = data;
                future.return(this._editor);
            }
        });
        return future;
    }
    saveEditor() {
        assert.ok(this._editor, "Editor is undefied. Ensure that createEditor is called.");
        let future = new Future();
        this._editor.save((err) => {
            if (err) {
                future.throw(err);
            }
            else {
                future.return();
            }
        });
        return future;
    }
}
exports.PropertiesParser = PropertiesParser;
$injector.register("propertiesParser", PropertiesParser);
