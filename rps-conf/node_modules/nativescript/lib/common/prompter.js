"use strict";
const Future = require("fibers/future");
const prompt = require("inquirer");
const helpers = require("./helpers");
const readline = require("readline");
let MuteStream = require("mute-stream");
class Prompter {
    constructor() {
        this.muteStreamInstance = null;
    }
    dispose() {
        if (this.ctrlcReader) {
            this.ctrlcReader.close();
        }
    }
    get(schemas) {
        return (() => {
            try {
                this.muteStdout();
                let future = new Future;
                if (!helpers.isInteractive()) {
                    if (_.some(schemas, s => !s.default)) {
                        future.throw(new Error("Console is not interactive and no default action specified."));
                    }
                    else {
                        let result = {};
                        _.each(schemas, s => {
                            result[s.name] = s.default();
                        });
                        future.return(result);
                    }
                }
                else {
                    prompt.prompt(schemas, (result) => {
                        if (result) {
                            future.return(result);
                        }
                        else {
                            future.throw(new Error(`Unable to get result from prompt: ${result}`));
                        }
                    });
                }
                return future.wait();
            }
            finally {
                this.unmuteStdout();
            }
        }).future()();
    }
    getPassword(prompt, options) {
        return (() => {
            let schema = {
                message: prompt,
                type: "password",
                name: "password",
                validate: (value) => {
                    let allowEmpty = options && options.allowEmpty;
                    return (!allowEmpty && !value) ? "Password must be non-empty" : true;
                }
            };
            let result = this.get([schema]).wait();
            return result.password;
        }).future()();
    }
    getString(prompt, options) {
        return (() => {
            let schema = {
                message: prompt,
                type: "input",
                name: "inputString",
                validate: (value) => {
                    let doesNotAllowEmpty = options && _.has(options, "allowEmpty") && !options.allowEmpty;
                    return (doesNotAllowEmpty && !value) ? `${prompt} must be non-empty` : true;
                },
                default: options && options.defaultAction
            };
            let result = this.get([schema]).wait();
            return result.inputString;
        }).future()();
    }
    promptForChoice(promptMessage, choices) {
        return (() => {
            let schema = {
                message: promptMessage,
                type: "list",
                name: "userAnswer",
                choices: choices
            };
            let result = this.get([schema]).wait();
            return result.userAnswer;
        }).future()();
    }
    confirm(prompt, defaultAction) {
        return (() => {
            let schema = {
                type: "confirm",
                name: "prompt",
                default: defaultAction,
                message: prompt
            };
            let result = this.get([schema]).wait();
            return result.prompt;
        }).future()();
    }
    muteStdout() {
        if (helpers.isInteractive()) {
            process.stdin.setRawMode(true);
            this.muteStreamInstance = new MuteStream();
            this.muteStreamInstance.pipe(process.stdout);
            this.muteStreamInstance.mute();
            this.ctrlcReader = readline.createInterface({
                input: process.stdin,
                output: this.muteStreamInstance
            });
            this.ctrlcReader.on("SIGINT", process.exit);
        }
    }
    unmuteStdout() {
        if (helpers.isInteractive()) {
            process.stdin.setRawMode(false);
            if (this.muteStreamInstance) {
                this.cleanEventListeners(process.stdout);
                this.muteStreamInstance.unmute();
                this.muteStreamInstance = null;
                this.dispose();
            }
        }
    }
    cleanEventListeners(stream) {
        let memoryLeakEvents = [{
                eventName: "close",
                listenerName: "cleanup"
            }, {
                eventName: "error",
                listenerName: "onerror"
            }, {
                eventName: "drain",
                listenerName: "ondrain"
            }];
        _.each(memoryLeakEvents, (memoryleakEvent) => this.cleanListener(stream, memoryleakEvent.eventName, memoryleakEvent.listenerName));
    }
    cleanListener(stream, eventName, listenerName) {
        let eventListeners = process.stdout.listeners(eventName);
        let listenerFunction = _.find(eventListeners, (func) => func.name === listenerName);
        if (listenerFunction) {
            stream.removeListener(eventName, listenerFunction);
        }
    }
}
exports.Prompter = Prompter;
$injector.register("prompter", Prompter);
