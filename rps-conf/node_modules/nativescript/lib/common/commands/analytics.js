"use strict";
class AnalyticsCommand {
    constructor($analyticsService, $logger, $errors, $options, $staticConfig, settingName, humanReadableSettingName) {
        this.$analyticsService = $analyticsService;
        this.$logger = $logger;
        this.$errors = $errors;
        this.$options = $options;
        this.$staticConfig = $staticConfig;
        this.settingName = settingName;
        this.humanReadableSettingName = humanReadableSettingName;
        this.allowedParameters = [new AnalyticsCommandParameter(this.$errors)];
        this.disableAnalytics = true;
    }
    execute(args) {
        return (() => {
            let arg = args[0] || "";
            switch (arg.toLowerCase()) {
                case "enable":
                    this.$analyticsService.setStatus(this.settingName, true).wait();
                    this.$logger.info(`${this.humanReadableSettingName} is now enabled.`);
                    break;
                case "disable":
                    this.$analyticsService.setStatus(this.settingName, false).wait();
                    this.$logger.info(`${this.humanReadableSettingName} is now disabled.`);
                    break;
                case "status":
                case "":
                    this.$logger.out(this.$analyticsService.getStatusMessage(this.settingName, this.$options.json, this.humanReadableSettingName).wait());
                    break;
            }
        }).future()();
    }
}
class UsageReportingCommand extends AnalyticsCommand {
    constructor($analyticsService, $logger, $errors, $options, $staticConfig) {
        super($analyticsService, $logger, $errors, $options, $staticConfig, $staticConfig.TRACK_FEATURE_USAGE_SETTING_NAME, "Usage reporting");
    }
}
exports.UsageReportingCommand = UsageReportingCommand;
$injector.registerCommand("usage-reporting", UsageReportingCommand);
class ErrorReportingCommand extends AnalyticsCommand {
    constructor($analyticsService, $logger, $errors, $options, $staticConfig) {
        super($analyticsService, $logger, $errors, $options, $staticConfig, $staticConfig.ERROR_REPORT_SETTING_NAME, "Error reporting");
    }
}
exports.ErrorReportingCommand = ErrorReportingCommand;
$injector.registerCommand("error-reporting", ErrorReportingCommand);
class AnalyticsCommandParameter {
    constructor($errors) {
        this.$errors = $errors;
        this.mandatory = false;
    }
    validate(validationValue) {
        return (() => {
            let val = validationValue || "";
            switch (val.toLowerCase()) {
                case "enable":
                case "disable":
                case "status":
                case "":
                    return true;
                default:
                    this.$errors.fail(`The value '${validationValue}' is not valid. Valid values are 'enable', 'disable' and 'status'.`);
            }
        }).future()();
    }
}
exports.AnalyticsCommandParameter = AnalyticsCommandParameter;
