"use strict";
class OpenDeviceLogStreamCommand {
    constructor($devicesService, $errors, $commandsService, $options, $deviceLogProvider, $loggingLevels) {
        this.$devicesService = $devicesService;
        this.$errors = $errors;
        this.$commandsService = $commandsService;
        this.$options = $options;
        this.$deviceLogProvider = $deviceLogProvider;
        this.$loggingLevels = $loggingLevels;
        this.allowedParameters = [];
    }
    execute(args) {
        return (() => {
            this.$deviceLogProvider.setLogLevel(this.$loggingLevels.full);
            this.$devicesService.initialize({ deviceId: this.$options.device, skipInferPlatform: true }).wait();
            if (this.$devicesService.deviceCount > 1) {
                this.$commandsService.tryExecuteCommand("device", []).wait();
                this.$errors.fail(OpenDeviceLogStreamCommand.NOT_SPECIFIED_DEVICE_ERROR_MESSAGE);
            }
            let action = (device) => { return (() => device.openDeviceLogStream()).future()(); };
            this.$devicesService.execute(action).wait();
        }).future()();
    }
}
OpenDeviceLogStreamCommand.NOT_SPECIFIED_DEVICE_ERROR_MESSAGE = "More than one device found. Specify device explicitly.";
exports.OpenDeviceLogStreamCommand = OpenDeviceLogStreamCommand;
$injector.registerCommand("device|log", OpenDeviceLogStreamCommand);
