"use strict";
class StringCommandParameter {
    constructor($injector) {
        this.$injector = $injector;
        this.mandatory = false;
    }
    validate(validationValue) {
        return (() => {
            if (!validationValue) {
                if (this.errorMessage) {
                    this.$injector.resolve("errors").fail(this.errorMessage);
                }
                return false;
            }
            return true;
        }).future()();
    }
}
exports.StringCommandParameter = StringCommandParameter;
$injector.register("stringParameter", StringCommandParameter);
class StringParameterBuilder {
    constructor($injector) {
        this.$injector = $injector;
    }
    createMandatoryParameter(errorMsg) {
        let commandParameter = new StringCommandParameter(this.$injector);
        commandParameter.mandatory = true;
        commandParameter.errorMessage = errorMsg;
        return commandParameter;
    }
}
exports.StringParameterBuilder = StringParameterBuilder;
$injector.register("stringParameterBuilder", StringParameterBuilder);
