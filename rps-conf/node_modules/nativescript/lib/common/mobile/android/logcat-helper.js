"use strict";
const byline = require("byline");
const device_android_debug_bridge_1 = require("./device-android-debug-bridge");
const fiberBootstrap = require("../../fiber-bootstrap");
class LogcatHelper {
    constructor($childProcess, $deviceLogProvider, $devicePlatformsConstants, $logger, $injector, $processService) {
        this.$childProcess = $childProcess;
        this.$deviceLogProvider = $deviceLogProvider;
        this.$devicePlatformsConstants = $devicePlatformsConstants;
        this.$logger = $logger;
        this.$injector = $injector;
        this.$processService = $processService;
        this.mapDeviceToLoggingStarted = Object.create(null);
    }
    start(deviceIdentifier) {
        if (deviceIdentifier && !this.mapDeviceToLoggingStarted[deviceIdentifier]) {
            let adb = this.$injector.resolve(device_android_debug_bridge_1.DeviceAndroidDebugBridge, { identifier: deviceIdentifier });
            adb.executeCommand(["logcat", "-c"]).wait();
            let adbLogcat = adb.executeCommand(["logcat"], { returnChildProcess: true }).wait();
            let lineStream = byline(adbLogcat.stdout);
            adbLogcat.stderr.on("data", (data) => {
                this.$logger.trace("ADB logcat stderr: " + data.toString());
            });
            adbLogcat.on("close", (code) => {
                try {
                    this.mapDeviceToLoggingStarted[deviceIdentifier] = false;
                    if (code !== 0) {
                        this.$logger.trace("ADB process exited with code " + code.toString());
                    }
                }
                catch (err) {
                }
            });
            lineStream.on('data', (line) => {
                let lineText = line.toString();
                fiberBootstrap.run(() => this.$deviceLogProvider.logData(lineText, this.$devicePlatformsConstants.Android, deviceIdentifier));
            });
            this.$processService.attachToProcessExitSignals(this, adbLogcat.kill);
            this.mapDeviceToLoggingStarted[deviceIdentifier] = true;
        }
    }
}
exports.LogcatHelper = LogcatHelper;
$injector.register("logcatHelper", LogcatHelper);
