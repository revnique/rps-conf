"use strict";
const events_1 = require("events");
const Future = require("fibers/future");
class DeviceDiscovery extends events_1.EventEmitter {
    constructor() {
        super(...arguments);
        this.devices = {};
    }
    addDevice(device) {
        this.devices[device.deviceInfo.identifier] = device;
        this.raiseOnDeviceFound(device);
    }
    removeDevice(deviceIdentifier) {
        let device = this.devices[deviceIdentifier];
        if (!device) {
            return;
        }
        delete this.devices[deviceIdentifier];
        this.raiseOnDeviceLost(device);
    }
    startLookingForDevices() {
        return Future.fromResult();
    }
    checkForDevices() {
        return Future.fromResult();
    }
    raiseOnDeviceFound(device) {
        this.emit("deviceFound", device);
    }
    raiseOnDeviceLost(device) {
        this.emit("deviceLost", device);
    }
}
exports.DeviceDiscovery = DeviceDiscovery;
$injector.register("deviceDiscovery", DeviceDiscovery);
