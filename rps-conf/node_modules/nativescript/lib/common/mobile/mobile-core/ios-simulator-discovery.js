"use strict";
const device_discovery_1 = require("./device-discovery");
const Future = require("fibers/future");
const ios_simulator_device_1 = require("./../ios/simulator/ios-simulator-device");
class IOSSimulatorDiscovery extends device_discovery_1.DeviceDiscovery {
    constructor($injector, $childProcess, $iOSSimResolver, $hostInfo) {
        super();
        this.$injector = $injector;
        this.$childProcess = $childProcess;
        this.$iOSSimResolver = $iOSSimResolver;
        this.$hostInfo = $hostInfo;
    }
    startLookingForDevices() {
        return this.checkForDevices(new Future());
    }
    checkForDevices(future) {
        if (this.$hostInfo.isDarwin) {
            let currentSimulator = null;
            if (this.isSimulatorRunning().wait()) {
                currentSimulator = this.$iOSSimResolver.iOSSim.getRunningSimulator();
            }
            if (currentSimulator) {
                if (!this.cachedSimulator) {
                    this.createAndAddDevice(currentSimulator);
                }
                else if (this.cachedSimulator.id !== currentSimulator.id) {
                    this.removeDevice(this.cachedSimulator.id);
                    this.createAndAddDevice(currentSimulator);
                }
            }
            else if (this.cachedSimulator) {
                this.removeDevice(this.cachedSimulator.id);
                this.cachedSimulator = null;
            }
        }
        if (future) {
            future.return();
        }
        return future || Future.fromResult();
    }
    isSimulatorRunning() {
        return (() => {
            try {
                let output = this.$childProcess.exec("ps cax | grep launchd_sim").wait();
                return output.indexOf('launchd_sim') !== -1;
            }
            catch (e) {
                return false;
            }
        }).future()();
    }
    createAndAddDevice(simulator) {
        this.cachedSimulator = _.cloneDeep(simulator);
        this.addDevice(this.$injector.resolve(ios_simulator_device_1.IOSSimulator, { simulator: this.cachedSimulator }));
    }
}
exports.IOSSimulatorDiscovery = IOSSimulatorDiscovery;
$injector.register("iOSSimulatorDiscovery", IOSSimulatorDiscovery);
