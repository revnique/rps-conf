"use strict";
const Future = require("fibers/future");
let Registry = require("winreg");
class WinReg {
    constructor() {
        this.registryKeys = {
            HKLM: { registry: Registry.HKLM },
            HKCU: { registry: Registry.HKCU },
            HKCR: { registry: Registry.HKCR },
            HKCC: { registry: Registry.HKCC },
            HKU: { registry: Registry.HKU }
        };
    }
    getRegistryValue(valueName, hive, key, host) {
        let future = new Future();
        try {
            let regKey = new Registry({
                hive: (hive && hive.registry) ? hive.registry : null,
                key: key,
                host: host
            });
            regKey.get(valueName, (err, value) => {
                if (err) {
                    future.throw(err);
                }
                else {
                    future.return(value);
                }
            });
        }
        catch (err) {
            future.throw(err);
        }
        return future;
    }
}
exports.WinReg = WinReg;
$injector.register("winreg", WinReg);
