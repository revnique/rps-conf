"use strict";
const deviceAppDataBaseLib = require("../common/mobile/device-app-data/device-app-data-base");
const Future = require("fibers/future");
const path = require("path");
const android_device_hash_service_1 = require("../common/mobile/android/android-device-hash-service");
const device_android_debug_bridge_1 = require("../common/mobile/android/device-android-debug-bridge");
const SYNC_DIR_NAME = "sync";
const FULLSYNC_DIR_NAME = "fullsync";
class IOSAppIdentifier extends deviceAppDataBaseLib.DeviceAppDataBase {
    constructor(_appIdentifier, device, platform, $iOSSimResolver) {
        super(_appIdentifier);
        this.device = device;
        this.platform = platform;
        this.$iOSSimResolver = $iOSSimResolver;
        this._deviceProjectRootPath = null;
    }
    get deviceProjectRootPath() {
        if (!this._deviceProjectRootPath) {
            if (this.device.isEmulator) {
                let applicationPath = this.$iOSSimResolver.iOSSim.getApplicationPath(this.device.deviceInfo.identifier, this.appIdentifier);
                this._deviceProjectRootPath = path.join(applicationPath, "app");
            }
            else {
                this._deviceProjectRootPath = IOSAppIdentifier.DEVICE_PROJECT_ROOT_PATH;
            }
        }
        return this.getDeviceProjectRootPath(this._deviceProjectRootPath);
    }
    get deviceSyncZipPath() {
        if (this.device.isEmulator) {
            return undefined;
        }
        else {
            return "Library/Application Support/LiveSync/sync.zip";
        }
    }
    isLiveSyncSupported() {
        return Future.fromResult(true);
    }
}
IOSAppIdentifier.DEVICE_PROJECT_ROOT_PATH = "Library/Application Support/LiveSync/app";
exports.IOSAppIdentifier = IOSAppIdentifier;
class AndroidAppIdentifier extends deviceAppDataBaseLib.DeviceAppDataBase {
    constructor(_appIdentifier, device, platform, $options, $injector) {
        super(_appIdentifier);
        this.device = device;
        this.platform = platform;
        this.$options = $options;
        this.$injector = $injector;
    }
    get deviceProjectRootPath() {
        if (!this._deviceProjectRootPath) {
            let syncFolderName = this.getSyncFolderName().wait();
            this._deviceProjectRootPath = `/data/local/tmp/${this.appIdentifier}/${syncFolderName}`;
        }
        return this._deviceProjectRootPath;
    }
    isLiveSyncSupported() {
        return Future.fromResult(true);
    }
    getSyncFolderName() {
        return (() => {
            let adb = this.$injector.resolve(device_android_debug_bridge_1.DeviceAndroidDebugBridge, { identifier: this.device.deviceInfo.identifier });
            let deviceHashService = this.$injector.resolve(android_device_hash_service_1.AndroidDeviceHashService, { adb: adb, appIdentifier: this.appIdentifier });
            let hashFile = this.$options.force ? null : deviceHashService.doesShasumFileExistsOnDevice().wait();
            return this.$options.watch || hashFile ? SYNC_DIR_NAME : FULLSYNC_DIR_NAME;
        }).future()();
    }
}
exports.AndroidAppIdentifier = AndroidAppIdentifier;
class DeviceAppDataProvider {
    createFactoryRules() {
        return {
            iOS: {
                vanilla: IOSAppIdentifier
            },
            Android: {
                vanilla: AndroidAppIdentifier
            }
        };
    }
}
exports.DeviceAppDataProvider = DeviceAppDataProvider;
$injector.register("deviceAppDataProvider", DeviceAppDataProvider);
