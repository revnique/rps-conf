"use strict";
const semver = require("semver");
const helpers = require("../common/helpers");
const os_1 = require("os");
class XcprojService {
    constructor($childProcess, $errors, $logger, $staticConfig, $sysInfo, $xcodeSelectService) {
        this.$childProcess = $childProcess;
        this.$errors = $errors;
        this.$logger = $logger;
        this.$staticConfig = $staticConfig;
        this.$sysInfo = $sysInfo;
        this.$xcodeSelectService = $xcodeSelectService;
    }
    verifyXcproj(shouldFail) {
        return (() => {
            let xcprojInfo = this.getXcprojInfo().wait();
            if (xcprojInfo.shouldUseXcproj && !xcprojInfo.xcprojAvailable) {
                let errorMessage = `You are using CocoaPods version ${xcprojInfo.cocoapodVer} which does not support Xcode ${xcprojInfo.xcodeVersion.major}.${xcprojInfo.xcodeVersion.minor} yet.${os_1.EOL}${os_1.EOL}You can update your cocoapods by running $sudo gem install cocoapods from a terminal.${os_1.EOL}${os_1.EOL}In order for the NativeScript CLI to be able to work correctly with this setup you need to install xcproj command line tool and add it to your PATH. Xcproj can be installed with homebrew by running $ brew install xcproj from the terminal`;
                if (shouldFail) {
                    this.$errors.failWithoutHelp(errorMessage);
                }
                else {
                    this.$logger.warn(errorMessage);
                }
                return true;
            }
            return false;
        }).future()();
    }
    getXcprojInfo() {
        return (() => {
            if (!this.xcprojInfoCache) {
                let cocoapodVer = this.$sysInfo.getCocoapodVersion().wait(), xcodeVersion = this.$xcodeSelectService.getXcodeVersion().wait();
                if (cocoapodVer && !semver.valid(cocoapodVer)) {
                    cocoapodVer = _.take(cocoapodVer.split("."), 3).join(".");
                }
                xcodeVersion.patch = xcodeVersion.patch || "0";
                let shouldUseXcproj = cocoapodVer && !!(semver.lt(cocoapodVer, "1.0.0") && ~helpers.versionCompare(xcodeVersion, "7.3.0")), xcprojAvailable;
                if (shouldUseXcproj) {
                    try {
                        this.$childProcess.exec("xcproj --version").wait();
                        xcprojAvailable = true;
                    }
                    catch (e) {
                        xcprojAvailable = false;
                    }
                }
                this.xcprojInfoCache = { cocoapodVer, xcodeVersion, shouldUseXcproj, xcprojAvailable };
            }
            return this.xcprojInfoCache;
        }).future()();
    }
}
$injector.register("xcprojService", XcprojService);
