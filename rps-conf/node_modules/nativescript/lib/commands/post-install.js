"use strict";
const post_install_1 = require("../common/commands/post-install");
const emailValidator = require("email-validator");
const queryString = require("querystring");
const helpers = require("../common/helpers");
class PostInstallCliCommand extends post_install_1.PostInstallCommand {
    constructor($fs, $httpClient, $prompter, $userSettingsService, $staticConfig, $commandsService, $htmlHelpService, $options, $doctorService, $analyticsService, $logger) {
        super($fs, $staticConfig, $commandsService, $htmlHelpService, $options, $doctorService, $analyticsService, $logger);
        this.$httpClient = $httpClient;
        this.$prompter = $prompter;
        this.$userSettingsService = $userSettingsService;
        this.logger = $logger;
    }
    execute(args) {
        return (() => {
            super.execute(args).wait();
            if (this.shouldAskForEmail()) {
                this.logger.out("Leave your e-mail address here to subscribe for NativeScript newsletter and product updates, tips and tricks:");
                let email = this.getEmail("(press Enter for blank)").wait();
                this.$userSettingsService.saveSetting("EMAIL_REGISTERED", true).wait();
                this.sendEmail(email);
            }
        }).future()();
    }
    shouldAskForEmail() {
        return helpers.isInteractive() && process.env.CLI_NOPROMPT !== "1" && !this.$userSettingsService.getSettingValue("EMAIL_REGISTERED").wait();
    }
    getEmail(prompt, options) {
        return (() => {
            let schema = {
                message: prompt,
                type: "input",
                name: "inputEmail",
                validate: (value) => {
                    if (value === "" || emailValidator.validate(value)) {
                        return true;
                    }
                    return "Please provide a valid e-mail or simply leave it blank.";
                },
                default: options && options.defaultAction
            };
            let result = this.$prompter.get([schema]).wait();
            return result.inputEmail;
        }).future()();
    }
    sendEmail(email) {
        if (email) {
            let postData = queryString.stringify({
                'elqFormName': "dev_uins_cli",
                'elqSiteID': '1325',
                'emailAddress': email,
                'elqCookieWrite': '0'
            });
            let options = {
                url: 'https://s1325.t.eloqua.com/e/f2',
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'Content-Length': postData.length
                },
                body: postData
            };
            this.$httpClient.httpRequest(options).wait();
        }
    }
}
exports.PostInstallCliCommand = PostInstallCliCommand;
$injector.registerCommand("post-install-cli", PostInstallCliCommand);
