"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var session_view_model_1 = require("../session-page/session-view-model");
//TODO: Remove later
var fakeDataServiceModule = require("../../services/fake-data-service");
var vm;
var page;
function pageNavigatingTo(args) {
    page = args.object;
    var firstSession = loadFirstSessionViaFaker();
    vm = new session_view_model_1.SessionViewModel(firstSession);
    page.bindingContext = vm;
}
exports.pageNavigatingTo = pageNavigatingTo;
function toggleFavorite(args) {
    vm.toggleFavorite();
}
exports.toggleFavorite = toggleFavorite;
function toggleDescription(args) {
    var btn = args.object;
    var txtDesc = page.getViewById('txtDescription');
    var scroll = page.getViewById('scroll');
    if (btn.text === 'MORE') {
        btn.text = 'LESS';
        txtDesc.text = vm.description;
    }
    else {
        btn.text = 'MORE';
        txtDesc.text = vm.descriptionShort;
        scroll.scrollToVerticalOffset(0, false);
    }
}
exports.toggleDescription = toggleDescription;
function loadFirstSessionViaFaker() {
    var speakers = fakeDataServiceModule.generateSpeakers();
    var roomInfos = fakeDataServiceModule.generateRoomInfos();
    var sessions = fakeDataServiceModule.generateSessions(speakers, roomInfos);
    var nonBreakSessions = sessions.filter(function (s) {
        return !s.isBreak && s.speakers.length > 0;
    });
    return nonBreakSessions[0];
}
exports.loadFirstSessionViaFaker = loadFirstSessionViaFaker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2Vzc2lvbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EseUVBQXNFO0FBRXRFLG9CQUFvQjtBQUNwQix3RUFBMEU7QUFFMUUsSUFBSSxFQUFvQixDQUFDO0FBQ3pCLElBQUksSUFBVSxDQUFDO0FBRWYsMEJBQWlDLElBQUk7SUFDakMsSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsSUFBSSxZQUFZLEdBQUcsd0JBQXdCLEVBQUUsQ0FBQztJQUM5QyxFQUFFLEdBQUcsSUFBSSxxQ0FBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4QyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBTEQsNENBS0M7QUFFRCx3QkFBK0IsSUFBSTtJQUMvQixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEIsQ0FBQztBQUZELHdDQUVDO0FBRUQsMkJBQWtDLElBQWU7SUFDN0MsSUFBSSxHQUFHLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM5QixJQUFJLE9BQU8sR0FBVSxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDeEQsSUFBSSxNQUFNLEdBQWUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVwRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdEIsR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDbEIsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ2xDLENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQztRQUNGLEdBQUcsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDO1FBQ25DLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQztBQUNMLENBQUM7QUFkRCw4Q0FjQztBQUVEO0lBQ0ksSUFBSSxRQUFRLEdBQUcscUJBQXFCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN4RCxJQUFJLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzFELElBQUksUUFBUSxHQUFRLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNoRixJQUFJLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFSRCw0REFRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XHJcbmltcG9ydCB7IFBhZ2UgfSBmcm9tICd1aS9wYWdlJztcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAndWkvYnV0dG9uJztcclxuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICd1aS9sYWJlbCc7XHJcbmltcG9ydCB7IFNjcm9sbFZpZXcgfSBmcm9tICd1aS9zY3JvbGwtdmlldyc7XHJcbmltcG9ydCB7IFNlc3Npb25WaWV3TW9kZWwgfSBmcm9tICcuLi9zZXNzaW9uLXBhZ2Uvc2Vzc2lvbi12aWV3LW1vZGVsJztcclxuXHJcbi8vVE9ETzogUmVtb3ZlIGxhdGVyXHJcbmltcG9ydCAqIGFzIGZha2VEYXRhU2VydmljZU1vZHVsZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9mYWtlLWRhdGEtc2VydmljZSc7XHJcblxyXG52YXIgdm06IFNlc3Npb25WaWV3TW9kZWw7XHJcbnZhciBwYWdlOiBQYWdlO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHBhZ2VOYXZpZ2F0aW5nVG8oYXJncykge1xyXG4gICAgcGFnZSA9IDxQYWdlPmFyZ3Mub2JqZWN0O1xyXG4gICAgdmFyIGZpcnN0U2Vzc2lvbiA9IGxvYWRGaXJzdFNlc3Npb25WaWFGYWtlcigpO1xyXG4gICAgdm0gPSBuZXcgU2Vzc2lvblZpZXdNb2RlbChmaXJzdFNlc3Npb24pO1xyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IHZtO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gdG9nZ2xlRmF2b3JpdGUoYXJncykge1xyXG4gICAgdm0udG9nZ2xlRmF2b3JpdGUoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZURlc2NyaXB0aW9uKGFyZ3M6IEV2ZW50RGF0YSkge1xyXG4gICAgdmFyIGJ0biA9IDxCdXR0b24+YXJncy5vYmplY3Q7XHJcbiAgICB2YXIgdHh0RGVzYyA9IDxMYWJlbD5wYWdlLmdldFZpZXdCeUlkKCd0eHREZXNjcmlwdGlvbicpO1xyXG4gICAgdmFyIHNjcm9sbCA9IDxTY3JvbGxWaWV3PnBhZ2UuZ2V0Vmlld0J5SWQoJ3Njcm9sbCcpO1xyXG5cclxuICAgIGlmIChidG4udGV4dCA9PT0gJ01PUkUnKSB7XHJcbiAgICAgICAgYnRuLnRleHQgPSAnTEVTUyc7XHJcbiAgICAgICAgdHh0RGVzYy50ZXh0ID0gdm0uZGVzY3JpcHRpb247XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBidG4udGV4dCA9ICdNT1JFJztcclxuICAgICAgICB0eHREZXNjLnRleHQgPSB2bS5kZXNjcmlwdGlvblNob3J0O1xyXG4gICAgICAgIHNjcm9sbC5zY3JvbGxUb1ZlcnRpY2FsT2Zmc2V0KDAsIGZhbHNlKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRGaXJzdFNlc3Npb25WaWFGYWtlcjxUPigpIHtcclxuICAgIGxldCBzcGVha2VycyA9IGZha2VEYXRhU2VydmljZU1vZHVsZS5nZW5lcmF0ZVNwZWFrZXJzKCk7XHJcbiAgICBsZXQgcm9vbUluZm9zID0gZmFrZURhdGFTZXJ2aWNlTW9kdWxlLmdlbmVyYXRlUm9vbUluZm9zKCk7XHJcbiAgICBsZXQgc2Vzc2lvbnMgPSA8YW55PmZha2VEYXRhU2VydmljZU1vZHVsZS5nZW5lcmF0ZVNlc3Npb25zKHNwZWFrZXJzLCByb29tSW5mb3MpO1xyXG4gICAgdmFyIG5vbkJyZWFrU2Vzc2lvbnMgPSBzZXNzaW9ucy5maWx0ZXIocyA9PiB7XHJcbiAgICAgICAgcmV0dXJuICFzLmlzQnJlYWsgJiYgcy5zcGVha2Vycy5sZW5ndGggPiAwO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gbm9uQnJlYWtTZXNzaW9uc1swXTtcclxufSJdfQ==