"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var session_view_model_1 = require("../session-page/session-view-model");
//TODO: Remove later
var fakeDataServiceModule = require("../../services/fake-data-service");
var vm;
var page;
function pageNavigatingTo(args) {
    page = args.object;
    var firstSession = loadFirstSessionViaFaker();
    vm = new session_view_model_1.SessionViewModel(firstSession);
    page.bindingContext = vm;
}
exports.pageNavigatingTo = pageNavigatingTo;
function toggleFavorite(args) {
    vm.toggleFavorite();
}
exports.toggleFavorite = toggleFavorite;
function toggleDescription(args) {
    var btn = args.object;
    var txtDesc = page.getViewById('txtDescription');
    var scroll = page.getViewById('scroll');
    if (btn.text === 'MORE') {
        btn.text = 'LESS';
        txtDesc.text = vm.description;
    }
    else {
        btn.text = 'MORE';
        txtDesc.text = vm.descriptionShort;
        scroll.scrollToVerticalOffset(0, false);
    }
}
exports.toggleDescription = toggleDescription;
function loadFirstSessionViaFaker() {
    var speakers = fakeDataServiceModule.generateSpeakers();
    var roomInfos = fakeDataServiceModule.generateRoomInfos();
    var sessions = fakeDataServiceModule.generateSessions(speakers, roomInfos);
    var nonBreakSessions = sessions.filter(function (s) {
        return !s.isBreak && s.speakers.length > 0;
    });
    return nonBreakSessions[0];
}
exports.loadFirstSessionViaFaker = loadFirstSessionViaFaker;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic2Vzc2lvbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBS0EseUVBQXNFO0FBRXRFLG9CQUFvQjtBQUNwQix3RUFBMEU7QUFFMUUsSUFBSSxFQUFvQixDQUFDO0FBQ3pCLElBQUksSUFBVSxDQUFDO0FBRWYsMEJBQWlDLElBQUk7SUFDakMsSUFBSSxHQUFTLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDekIsSUFBSSxZQUFZLEdBQUcsd0JBQXdCLEVBQUUsQ0FBQztJQUM5QyxFQUFFLEdBQUcsSUFBSSxxQ0FBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUN4QyxJQUFJLENBQUMsY0FBYyxHQUFHLEVBQUUsQ0FBQztBQUM3QixDQUFDO0FBTEQsNENBS0M7QUFFRCx3QkFBK0IsSUFBSTtJQUMvQixFQUFFLENBQUMsY0FBYyxFQUFFLENBQUM7QUFDeEIsQ0FBQztBQUZELHdDQUVDO0FBRUQsMkJBQWtDLElBQWU7SUFDN0MsSUFBSSxHQUFHLEdBQVcsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM5QixJQUFJLE9BQU8sR0FBVSxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDeEQsSUFBSSxNQUFNLEdBQWUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVwRCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDdEIsR0FBRyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDbEIsT0FBTyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsV0FBVyxDQUFDO0lBQ2xDLENBQUM7SUFDRCxJQUFJLENBQUMsQ0FBQztRQUNGLEdBQUcsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ2xCLE9BQU8sQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDO1FBQ25DLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDNUMsQ0FBQztBQUNMLENBQUM7QUFkRCw4Q0FjQztBQUVEO0lBQ0ksSUFBSSxRQUFRLEdBQUcscUJBQXFCLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUN4RCxJQUFJLFNBQVMsR0FBRyxxQkFBcUIsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQzFELElBQUksUUFBUSxHQUFRLHFCQUFxQixDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQztJQUNoRixJQUFJLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUMsVUFBQSxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLENBQUMsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFSRCw0REFRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gJ2RhdGEvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBQYWdlIH0gZnJvbSAndWkvcGFnZSc7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tICd1aS9idXR0b24nO1xuaW1wb3J0IHsgTGFiZWwgfSBmcm9tICd1aS9sYWJlbCc7XG5pbXBvcnQgeyBTY3JvbGxWaWV3IH0gZnJvbSAndWkvc2Nyb2xsLXZpZXcnO1xuaW1wb3J0IHsgU2Vzc2lvblZpZXdNb2RlbCB9IGZyb20gJy4uL3Nlc3Npb24tcGFnZS9zZXNzaW9uLXZpZXctbW9kZWwnO1xuXG4vL1RPRE86IFJlbW92ZSBsYXRlclxuaW1wb3J0ICogYXMgZmFrZURhdGFTZXJ2aWNlTW9kdWxlIGZyb20gJy4uLy4uL3NlcnZpY2VzL2Zha2UtZGF0YS1zZXJ2aWNlJztcblxudmFyIHZtOiBTZXNzaW9uVmlld01vZGVsO1xudmFyIHBhZ2U6IFBhZ2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdlTmF2aWdhdGluZ1RvKGFyZ3MpIHtcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XG4gICAgdmFyIGZpcnN0U2Vzc2lvbiA9IGxvYWRGaXJzdFNlc3Npb25WaWFGYWtlcigpO1xuICAgIHZtID0gbmV3IFNlc3Npb25WaWV3TW9kZWwoZmlyc3RTZXNzaW9uKTtcbiAgICBwYWdlLmJpbmRpbmdDb250ZXh0ID0gdm07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b2dnbGVGYXZvcml0ZShhcmdzKSB7XG4gICAgdm0udG9nZ2xlRmF2b3JpdGUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvZ2dsZURlc2NyaXB0aW9uKGFyZ3M6IEV2ZW50RGF0YSkge1xuICAgIHZhciBidG4gPSA8QnV0dG9uPmFyZ3Mub2JqZWN0O1xuICAgIHZhciB0eHREZXNjID0gPExhYmVsPnBhZ2UuZ2V0Vmlld0J5SWQoJ3R4dERlc2NyaXB0aW9uJyk7XG4gICAgdmFyIHNjcm9sbCA9IDxTY3JvbGxWaWV3PnBhZ2UuZ2V0Vmlld0J5SWQoJ3Njcm9sbCcpO1xuXG4gICAgaWYgKGJ0bi50ZXh0ID09PSAnTU9SRScpIHtcbiAgICAgICAgYnRuLnRleHQgPSAnTEVTUyc7XG4gICAgICAgIHR4dERlc2MudGV4dCA9IHZtLmRlc2NyaXB0aW9uO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgYnRuLnRleHQgPSAnTU9SRSc7XG4gICAgICAgIHR4dERlc2MudGV4dCA9IHZtLmRlc2NyaXB0aW9uU2hvcnQ7XG4gICAgICAgIHNjcm9sbC5zY3JvbGxUb1ZlcnRpY2FsT2Zmc2V0KDAsIGZhbHNlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkRmlyc3RTZXNzaW9uVmlhRmFrZXI8VD4oKSB7XG4gICAgbGV0IHNwZWFrZXJzID0gZmFrZURhdGFTZXJ2aWNlTW9kdWxlLmdlbmVyYXRlU3BlYWtlcnMoKTtcbiAgICBsZXQgcm9vbUluZm9zID0gZmFrZURhdGFTZXJ2aWNlTW9kdWxlLmdlbmVyYXRlUm9vbUluZm9zKCk7XG4gICAgbGV0IHNlc3Npb25zID0gPGFueT5mYWtlRGF0YVNlcnZpY2VNb2R1bGUuZ2VuZXJhdGVTZXNzaW9ucyhzcGVha2Vycywgcm9vbUluZm9zKTtcbiAgICB2YXIgbm9uQnJlYWtTZXNzaW9ucyA9IHNlc3Npb25zLmZpbHRlcihzID0+IHtcbiAgICAgICAgcmV0dXJuICFzLmlzQnJlYWsgJiYgcy5zcGVha2Vycy5sZW5ndGggPiAwO1xuICAgIH0pO1xuICAgIHJldHVybiBub25CcmVha1Nlc3Npb25zWzBdO1xufSJdfQ==